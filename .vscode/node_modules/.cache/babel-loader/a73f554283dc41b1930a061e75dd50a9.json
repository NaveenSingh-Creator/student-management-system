{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pictures n other\\\\Desktop\\\\student-management-system\\\\src\\\\Page\\\\Dashboard\\\\Edit.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Swal from \"sweetalert2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Edit(_ref) {\n  _s();\n\n  let {\n    employees,\n    selectedEmployee,\n    setEmployees,\n    setIsEditing\n  } = _ref;\n  const id = selectedEmployee.id;\n  const [name, setName] = useState(selectedEmployee.name);\n  const [rollno, setRollno] = useState(selectedEmployee.rollno);\n  const [email, setEmail] = useState(selectedEmployee.email);\n  const [address, setAddress] = useState(selectedEmployee.address);\n  const [contact, setContact] = useState(selectedEmployee.contact);\n\n  const handleUpcontact = e => {\n    e.preventDefault();\n\n    if (!name || !rollno || !email || !address || !contact) {\n      return Swal.fire({\n        icon: \"error\",\n        title: \"Error!\",\n        text: \"All fields are required.\",\n        showConfirmButton: true\n      });\n    }\n\n    const employee = {\n      id,\n      name,\n      rollno,\n      email,\n      address,\n      contact\n    };\n\n    for (let i = 0; i < employees.length; i++) {\n      if (employees[i].id === id) {\n        employees.splice(i, 1, employee);\n        break;\n      }\n    }\n\n    setEmployees(employees);\n    setIsEditing(false);\n    Swal.fire({\n      icon: \"success\",\n      title: \"Student Updated!\",\n      text: `${employee.name} data has been upcontactd.`,\n      showConfirmButton: false,\n      timer: 1500\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"small-container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUpcontact,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edit Student\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"First Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"name\",\n        type: \"text\",\n        name: \"name\",\n        value: name,\n        onChange: e => setName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"rollno\",\n        children: \"Last Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"rollno\",\n        type: \"text\",\n        name: \"rollno\",\n        value: rollno,\n        onChange: e => setRollno(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"email\",\n        type: \"email\",\n        name: \"email\",\n        value: email,\n        onChange: e => setEmail(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"address\",\n        children: \"address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"address\",\n        type: \"text\",\n        name: \"address\",\n        value: address,\n        onChange: e => setAddress(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"contact\",\n        children: \"contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"contact\",\n        type: \"contact\",\n        name: \"contact\",\n        value: contact,\n        onChange: e => setContact(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: \"30px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Update Student\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          style: {\n            marginLeft: \"12px\"\n          },\n          className: \"muted-button\",\n          type: \"button\",\n          value: \"Cancel\",\n          onClick: () => setIsEditing(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Edit, \"XX3XfMp+ccl6Rw1rdlSfSACrgfQ=\");\n\n_c = Edit;\nexport default Edit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"sources":["D:/Pictures n other/Desktop/student-management-system/src/Page/Dashboard/Edit.js"],"names":["React","useState","Swal","Edit","employees","selectedEmployee","setEmployees","setIsEditing","id","name","setName","rollno","setRollno","email","setEmail","address","setAddress","contact","setContact","handleUpcontact","e","preventDefault","fire","icon","title","text","showConfirmButton","employee","i","length","splice","timer","target","value","marginTop","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Swal from \"sweetalert2\";\n\nfunction Edit({ employees, selectedEmployee, setEmployees, setIsEditing }) {\n  const id = selectedEmployee.id;\n\n  const [name, setName] = useState(selectedEmployee.name);\n  const [rollno, setRollno] = useState(selectedEmployee.rollno);\n  const [email, setEmail] = useState(selectedEmployee.email);\n  const [address, setAddress] = useState(selectedEmployee.address);\n  const [contact, setContact] = useState(selectedEmployee.contact);\n\n  const handleUpcontact = (e) => {\n    e.preventDefault();\n\n    if (!name || !rollno || !email || !address || !contact) {\n      return Swal.fire({\n        icon: \"error\",\n        title: \"Error!\",\n        text: \"All fields are required.\",\n        showConfirmButton: true,\n      });\n    }\n\n    const employee = {\n      id,\n      name,\n      rollno,\n      email,\n      address,\n      contact,\n    };\n\n    for (let i = 0; i < employees.length; i++) {\n      if (employees[i].id === id) {\n        employees.splice(i, 1, employee);\n        break;\n      }\n    }\n\n    setEmployees(employees);\n    setIsEditing(false);\n\n    Swal.fire({\n      icon: \"success\",\n      title: \"Student Updated!\",\n      text: `${employee.name} data has been upcontactd.`,\n      showConfirmButton: false,\n      timer: 1500,\n    });\n  };\n\n  return (\n    <div className=\"small-container\">\n      <form onSubmit={handleUpcontact}>\n        <h1>Edit Student</h1>\n        <label htmlFor=\"name\">First Name</label>\n        <input\n          id=\"name\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n        <label htmlFor=\"rollno\">Last Name</label>\n        <input\n          id=\"rollno\"\n          type=\"text\"\n          name=\"rollno\"\n          value={rollno}\n          onChange={(e) => setRollno(e.target.value)}\n        />\n        <label htmlFor=\"email\">Email</label>\n        <input\n          id=\"email\"\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n        <label htmlFor=\"address\">address</label>\n        <input\n          id=\"address\"\n          type=\"text\"\n          name=\"address\"\n          value={address}\n          onChange={(e) => setAddress(e.target.value)}\n        />\n        <label htmlFor=\"contact\">contact</label>\n        <input\n          id=\"contact\"\n          type=\"contact\"\n          name=\"contact\"\n          value={contact}\n          onChange={(e) => setContact(e.target.value)}\n        />\n        <div style={{ marginTop: \"30px\" }}>\n          <input type=\"submit\" value=\"Update Student\" />\n          <input\n            style={{ marginLeft: \"12px\" }}\n            className=\"muted-button\"\n            type=\"button\"\n            value=\"Cancel\"\n            onClick={() => setIsEditing(false)}\n          />\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Edit;\n"]},"metadata":{},"sourceType":"module"}